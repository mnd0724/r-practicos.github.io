summarytools::dfSummary(proc_data, plain.ascii = FALSE)
view(dfSummary(proc_data, headings=FALSE)) #Tabla como imagen
sum(is.na(proc_data))
proc_data <- proc_data %>%
filter_all(all_vars(!is.na(.) & . != -999 & . != -888)) #Filtrar NA'S
proc_data %>% ggplot(aes(x = sats_conec)) +
geom_bar()
proc_data %>% ggplot(aes(x = sats_averde)) +
geom_bar()
proc_data %>% ggplot(aes(x = sats_limpieza)) +
geom_bar()
proc_data %>% ggplot(aes(x = sats_conec)) +
geom_bar(fill = "coral")+
labs(title = "Satisfacción Conectividad",
x = "Satisfacción Conectividad",
y = "Frecuencia")
proc_data %>% ggplot(aes(x = sats_averde)) +
geom_bar(fill = "coral")+
labs(title = "Satisfacción área verde",
x = "Satisfacción área verde",
y = "Frecuencia")
proc_data %>% ggplot(aes(x = sats_limpieza)) +
geom_bar(fill = "coral")+
labs(title = "Satisfacción Limpieza",
x = "Satisfacción Limpieza",
y = "Frecuencia")
view(dfSummary(proc_data, headings=FALSE, graph.col = FALSE))
rm(list=ls())       # borrar todos los objetos en el espacio de trabajo
options(scipen=999) # valores sin notación científica#Cargar base de datos
pacman::p_load(sjlabelled,
dplyr, #Manipulacion de datos
stargazer, #Tablas
sjmisc, # Tablas
summarytools, # Tablas
kableExtra, #Tablas
sjPlot, #Tablas y gráficos
corrplot, # Correlaciones
sessioninfo, # Información de la sesión de trabajo
ggplot2,
haven) # Para la mayoría de los gráficos
data <- read_dta("input/ELSOC_W01_v4.01_Stata14.dta")
View(data)
dim(data) #2927 428
names(data)
proc_data <- data %>% select(t06_02,
t06_03,
t06_04,
m29,
comuna,
region)
view(proc_data)
sjmisc::descr(proc_data)
proc_data <- proc_data %>% rename("sats_conec"=t06_02, # Satisfacción conectividad
"sats_averde"=t06_03, # Satisfacción área verde
"sats_limpieza"=t06_04, # Satisfacción Limpieza
"ingreso"=m29) # Ingresos total del hogar
names(proc_data)
proc_data <- proc_data %>% dplyr::filter(region == "Metropolitana") # Filtrar por región (
proc_data <- filter(proc_data, comuna %in% c("Providencia",
"Colina",
"Las Condes",
"Vitacura",
"Santiago",
"Renca",
"La Pintana",
"Macul"))
sjmisc::descr(proc_data,
show = c("label","range", "mean", "sd", "NA.prc", "n"))%>%
kable(.,"markdown")
summarytools::dfSummary(proc_data, plain.ascii = FALSE)
view(dfSummary(proc_data, headings=FALSE)) #Tabla como imagen
sum(is.na(proc_data))
proc_data <- proc_data %>%
filter_all(all_vars(!is.na(.) & . != -999 & . != -888)) #Filtrar NA'S
proc_data %>% ggplot(aes(x = sats_conec)) +
geom_bar()
proc_data %>% ggplot(aes(x = sats_averde)) +
geom_bar()
proc_data %>% ggplot(aes(x = sats_limpieza)) +
geom_bar()
proc_data %>% ggplot(aes(x = sats_conec)) +
geom_bar(fill = "coral")+
labs(title = "Satisfacción Conectividad",
x = "Satisfacción Conectividad",
y = "Frecuencia")
proc_data %>% ggplot(aes(x = sats_averde)) +
geom_bar(fill = "coral")+
labs(title = "Satisfacción área verde",
x = "Satisfacción área verde",
y = "Frecuencia")
proc_data %>% ggplot(aes(x = sats_limpieza)) +
geom_bar(fill = "coral")+
labs(title = "Satisfacción Limpieza",
x = "Satisfacción Limpieza",
y = "Frecuencia")
rm(list=ls())       # borrar todos los objetos en el espacio de trabajo
options(scipen=999) # valores sin notación científica#Cargar base de datos
pacman::p_load(sjlabelled,
dplyr, #Manipulacion de datos
stargazer, #Tablas
sjmisc, # Tablas
summarytools, # Tablas
kableExtra, #Tablas
sjPlot, #Tablas y gráficos
corrplot, # Correlaciones
sessioninfo, # Información de la sesión de trabajo
ggplot2,
haven) # Para la mayoría de los gráficos
options(scipen=999) # valores sin notación científica#Cargar base de datos
data <- read_dta("input/ELSOC_W01_v4.01_Stata14.dta")
View(data)
dim(data) #2927 428
names(data)
proc_data <- data %>% select(t06_02,
t06_03,
t06_04,
m29,
comuna,
region)
view(proc_data)
sjmisc::descr(proc_data)
proc_data <- proc_data %>% rename("sats_conec"=t06_02, # Satisfacción conectividad
"sats_averde"=t06_03, # Satisfacción área verde
"sats_limpieza"=t06_04,# Satisfacción Limpieza
"ingreso"=m29) # Ingresos total del hogar
names(proc_data)
proc_data <- proc_data %>% dplyr::filter(region == "Metropolitana") # Filtrar por región (
proc_data <- filter(proc_data, comuna %in% c("Providencia",
"Colina",
"Las Condes",
"Vitacura",
"Santiago",
"Renca",
"La Pintana",
"Macul"))
sjmisc::descr(proc_data,
show = c("label","range", "mean", "sd", "NA.prc", "n"))%>%
kable(.,"markdown")
summarytools::dfSummary(proc_data, plain.ascii = FALSE)
view(dfSummary(proc_data, headings=FALSE)) #Tabla como imagen
sum(is.na(proc_data))
proc_data <- proc_data %>%
filter_all(all_vars(!is.na(.) & . != -999 & . != -888)) #Filtrar NA'S
proc_data %>% ggplot(aes(x = sats_conec)) +
geom_bar()
proc_data %>% ggplot(aes(x = sats_averde)) +
geom_bar()
proc_data %>% ggplot(aes(x = sats_limpieza)) +
geom_bar()
proc_data %>% ggplot(aes(x = sats_conec)) +
geom_bar(fill = "coral")+
labs(title = "Satisfacción Conectividad",
x = "Satisfacción Conectividad",
y = "Frecuencia")
proc_data %>% ggplot(aes(x = sats_averde)) +
geom_bar(fill = "coral")+
labs(title = "Satisfacción área verde",
x = "Satisfacción área verde",
y = "Frecuencia")
proc_data %>% ggplot(aes(x = sats_limpieza)) +
geom_bar(fill = "coral")+
labs(title = "Satisfacción Limpieza",
x = "Satisfacción Limpieza",
y = "Frecuencia")
view(dfSummary(proc_data, headings=FALSE, graph.col = FALSE))
datos <- data.frame(
data <- data.frame(
data.frame <- proc_data(
view(data.frame())
#2. ENTREGA 3 -----
#Primero que todo vamos a recodificar los niveles de satisfacción
data_proc$sats_conec <- factor(datos$satisfaccion,
data_proc$sats_conec <- factor(data_proc$sats_conec,
levels = 1:5,
labels = c("Totalmente insatisfecho", "Insatisfecho", "Ni satisfecho ni insatisfecho", "Satisfecho", "Totalmente satisfecho"))
View(proc_data)
view(dfSummary(proc_data, headings=FALSE, graph.col = FALSE))
rm(list=ls())       # borrar todos los objetos en el espacio de trabajo
pacman::p_load(sjlabelled,
dplyr, #Manipulacion de datos
stargazer, #Tablas
sjmisc, # Tablas
summarytools, # Tablas
kableExtra, #Tablas
sjPlot, #Tablas y gráficos
corrplot, # Correlaciones
sessioninfo, # Información de la sesión de trabajo
ggplot2,
haven) # Para la mayoría de los gráficos
options(scipen=999) # valores sin notación científica#Cargar base de datos
data <- read_dta("input/ELSOC_W01_v4.01_Stata14.dta")
View(data)
dim(data) #2927 428
names(data)
proc_data <- data %>% select(t06_02,
t06_03,
t06_04,
m29,
comuna,
region)
view(proc_data)
sjmisc::descr(proc_data)
proc_data <- proc_data %>% rename("sats_conec"=t06_02, # Satisfacción conectividad
"sats_averde"=t06_03, # Satisfacción área verde
"sats_limpieza"=t06_04,# Satisfacción Limpieza
"ingreso"=m29) # Ingresos total del hogar
names(proc_data)
proc_data <- proc_data %>% dplyr::filter(region == "Metropolitana") # Filtrar por región (
proc_data <- filter(proc_data, comuna %in% c("Providencia",
"Colina",
"Las Condes",
"Vitacura",
"Santiago",
"Renca",
"La Pintana",
"Macul"))
sjmisc::descr(proc_data,
show = c("label","range", "mean", "sd", "NA.prc", "n"))%>%
kable(.,"markdown")
summarytools::dfSummary(proc_data, plain.ascii = FALSE)
view(dfSummary(proc_data, headings=FALSE)) #Tabla como imagen
sum(is.na(proc_data))
proc_data <- proc_data %>%
filter_all(all_vars(!is.na(.) & . != -999 & . != -888)) #Filtrar NA'S
proc_data %>% ggplot(aes(x = sats_conec)) +
geom_bar()
proc_data %>% ggplot(aes(x = sats_averde)) +
geom_bar()
proc_data %>% ggplot(aes(x = sats_limpieza)) +
geom_bar()
proc_data %>% ggplot(aes(x = sats_conec)) +
geom_bar(fill = "coral")+
labs(title = "Satisfacción Conectividad",
x = "Satisfacción Conectividad",
y = "Frecuencia")
proc_data %>% ggplot(aes(x = sats_averde)) +
geom_bar(fill = "coral")+
labs(title = "Satisfacción área verde",
x = "Satisfacción área verde",
y = "Frecuencia")
proc_data %>% ggplot(aes(x = sats_limpieza)) +
geom_bar(fill = "coral")+
labs(title = "Satisfacción Limpieza",
x = "Satisfacción Limpieza",
y = "Frecuencia")
data_proc$sats_conec <- factor(data_proc$sats_conec,
levels = 1:5,
labels = c("Totalmente insatisfecho", "Insatisfecho", "Ni satisfecho ni insatisfecho", "Satisfecho", "Totalmente satisfecho"))
view(dfSummary(proc_data, headings=FALSE, graph.col = FALSE))
proc_data$sats_conec <- factor(proc_data$sats_conec,
levels = 1:5,
labels = c("Totalmente insatisfecho", "Insatisfecho", "Ni satisfecho ni insatisfecho", "Satisfecho", "Totalmente satisfecho"))
proc_data$sats_averde <- factor(proc_data$sats_averde,
levels = 1:5,
labels = c("Totalmente insatisfecho", "Insatisfecho", "Ni satisfecho ni insatisfecho", "Satisfecho", "Totalmente satisfecho"))
proc_data$sats_limpieza <- factor(proc_data$sats_conec,
levels = 1:5,
labels = c("Totalmente insatisfecho", "Insatisfecho", "Ni satisfecho ni insatisfecho", "Satisfecho", "Totalmente satisfecho"))
View(proc_data)
proc_data$sats_limpieza <- factor(proc_data$sats_conec,
levels = 1:5,
labels = c("Totalmente insatisfecho", "Insatisfecho", "Ni satisfecho ni insatisfecho", "Satisfecho", "Totalmente satisfecho"))
View(proc_data)
view(dfSummary(proc_data, headings=FALSE, graph.col = FALSE))
cor(proc_data)
rm(list=ls())       # borrar todos los objetos en el espacio de trabajo
pacman::p_load(sjlabelled,
dplyr, #Manipulacion de datos
stargazer, #Tablas
sjmisc, # Tablas
summarytools, # Tablas
kableExtra, #Tablas
sjPlot, #Tablas y gráficos
corrplot, # Correlaciones
sessioninfo, # Información de la sesión de trabajo
ggplot2,
haven) # Para la mayoría de los gráficos
options(scipen=999) # valores sin notación científica#Cargar base de datos
data <- read_dta("input/ELSOC_W01_v4.01_Stata14.dta")
View(data)
dim(data) #2927 428
names(data)
proc_data <- data %>% select(t06_02,
t06_03,
t06_04,
m29,
comuna,
region)
view(proc_data)
sjmisc::descr(proc_data)
proc_data <- proc_data %>% rename("sats_conec"=t06_02, # Satisfacción conectividad
"sats_averde"=t06_03, # Satisfacción área verde
"sats_limpieza"=t06_04,# Satisfacción Limpieza
"ingreso"=m29) # Ingresos total del hogar
names(proc_data)
proc_data <- proc_data %>% dplyr::filter(region == "Metropolitana") # Filtrar por región (
proc_data <- filter(proc_data, comuna %in% c("Providencia",
"Colina",
"Las Condes",
"Vitacura",
"Santiago",
"Renca",
"La Pintana",
"Macul"))
sjmisc::descr(proc_data,
show = c("label","range", "mean", "sd", "NA.prc", "n"))%>%
kable(.,"markdown")
summarytools::dfSummary(proc_data, plain.ascii = FALSE)
view(dfSummary(proc_data, headings=FALSE)) #Tabla como imagen
sum(is.na(proc_data))
proc_data <- proc_data %>%
filter_all(all_vars(!is.na(.) & . != -999 & . != -888)) #Filtrar NA'S
proc_data %>% ggplot(aes(x = sats_conec)) +
geom_bar()
proc_data %>% ggplot(aes(x = sats_averde)) +
geom_bar()
proc_data %>% ggplot(aes(x = sats_limpieza)) +
geom_bar()
proc_data %>% ggplot(aes(x = sats_conec)) +
geom_bar(fill = "coral")+
labs(title = "Satisfacción Conectividad",
x = "Satisfacción Conectividad",
y = "Frecuencia")
proc_data %>% ggplot(aes(x = sats_averde)) +
geom_bar(fill = "coral")+
labs(title = "Satisfacción área verde",
x = "Satisfacción área verde",
y = "Frecuencia")
proc_data %>% ggplot(aes(x = sats_limpieza)) +
geom_bar(fill = "coral")+
labs(title = "Satisfacción Limpieza",
x = "Satisfacción Limpieza",
y = "Frecuencia")
#2. ENTREGA 3 -----
cor(proc_data)
#2. ENTREGA 3 -----
cor(data)
psych::alpha(data)
psych::alpha(proc_data)
psych::alpha(proc_data)
psych::alpha(data)
psych::alpha(data)
rm(list=ls())       # borrar todos los objetos en el espacio de trabajo
pacman::p_load(sjlabelled,
dplyr, #Manipulacion de datos
stargazer, #Tablas
sjmisc, # Tablas
summarytools, # Tablas
kableExtra, #Tablas
sjPlot, #Tablas y gráficos
corrplot, # Correlaciones
sessioninfo, # Información de la sesión de trabajo
ggplot2,
haven,
GGally) # Para la mayoría de los gráficos
options(scipen=999) # valores sin notación científica#Cargar base de datos
data <- read_dta("input/ELSOC_W01_v4.01_Stata14.dta")
View(data)
dim(data) #2927 428
proc_data <- data %>% select(t06_01,
t06_02,
t06_03,
t06_04,
t06_06,
t08,
t10,
t11_04,
m29,
comuna,
region)
view(proc_data)
names(data)
sjmisc::descr(proc_data)
proc_data <- proc_data %>% rename("sats_seguridad" =t06_01,
"sats_conectividad"=t06_02, # Satisfacción conectividad
"sats_averde"=t06_03, # Satisfacción área verde
"sats_limpieza"=t06_04,# Satisfacción Limpieza
"sats_colegios"=t06_06, #satisfacción cercanía a colegios de buena calidad
"percp_barrio"=t08,
"percp_seguridad"=t10,
"frq_vecinosbasura"=t11_04,
"ingreso"=m29) # Ingresos total del hogar
#VER LOS NOMBRES DE LAS VARIABLES
names(proc_data)
#Filtrar por comunas de la región metropolitana
proc_data <- proc_data %>% dplyr::filter(region == "Metropolitana") # Filtrar por región (
proc_data <- filter(proc_data, comuna %in% c("Providencia",
"Colina",
"Maipu",
"Las Condes",
"Santiago",
"Puente Alto",
"La Florida",
"San Bernardo"))
view(proc_data)
sjmisc::descr(proc_data,
show = c("label","range", "mean", "sd", "NA.prc", "n"))%>%
kable(.,"markdown")
summarytools::dfSummary(proc_data, plain.ascii = FALSE)
view(dfSummary(proc_data, headings=FALSE)) #Tabla como imagen
sum(is.na(proc_data))
proc_data <- proc_data %>%
filter_all(all_vars(!is.na(.) & . != -999 & . != -888)) #Filtrar NA'S
view(proc_data)
sjmisc::descr(proc_data,
show = c("label","range", "mean", "sd", "NA.prc", "n"))%>%
kable(.,"markdown")
summarytools::dfSummary(proc_data, plain.ascii = FALSE)
view(dfSummary(proc_data, headings=FALSE)) #Tabla como imagen
sum(is.na(proc_data))
proc_data <- proc_data %>%
filter_all(all_vars(!is.na(.) & . != -999 & . != -888)) #Filtrar NA'S
summarytools::dfSummary(proc_data, plain.ascii = FALSE)
view(dfSummary(proc_data, headings=FALSE))  #SIN NA´S
#GRÁFICOS
proc_data %>% ggplot(aes(x = sats_seguridad)) +
geom_bar(fill = "coral")+
labs(title = "Satisfacción Seguridad en el Barrio",
x = "Satisfacción Seguridad",
y = "Frecuencia")
proc_data %>% ggplot(aes(x = sats_conectividad)) +
geom_bar(fill = "coral")+
labs(title = "Satisfacción Conectividad",
x = "Satisfacción Conectividad",
y = "Frecuencia")
proc_data %>% ggplot(aes(x = sats_averde)) +
geom_bar(fill = "coral")+
labs(title = "Satisfacción área verde",
x = "Satisfacción área verde",
y = "Frecuencia")
proc_data %>% ggplot(aes(x = sats_limpieza)) +
geom_bar(fill = "coral")+
labs(title = "Satisfacción Limpieza y Belleza en el Barrio",
x = "Satisfacción Limpieza",
y = "Frecuencia")
proc_data %>% ggplot(aes(x = sats_colegios)) +
geom_bar(fill = "coral")+
labs(title = "Satisfacción cercanía a colegios de buena calidad",
x = "Satisfacción cercanía a colegios de buena calidad",
y = "Frecuencia")
proc_data %>% ggplot(aes(x = percp_barrio)) +
geom_bar(fill = "coral")+
labs(title = "Percepción Evaluación del Barrio",
x = "Percepción Evaluación del Barrio",
y = "Frecuencia")
proc_data %>% ggplot(aes(x = frq_vecinosbasura)) +
geom_bar(fill = "coral")+
labs(title = "Satisfacción Limpi",
x = "Satisfacción Limpieza",
y = "Frecuencia")
ggpairs(proc_data)
#GRÁFICOS
proc_data %>% ggplot(aes(x = sats_seguridad)) +
geom_bar(fill = "coral")+
labs(title = "Satisfacción Seguridad en el Barrio",
x = "Satisfacción Seguridad",
y = "Frecuencia")
proc_data %>% ggplot(aes(x = sats_conectividad)) +
geom_bar(fill = "coral")+
labs(title = "Satisfacción Conectividad",
x = "Satisfacción Conectividad",
y = "Frecuencia")
proc_data %>% ggplot(aes(x = sats_averde)) +
geom_bar(fill = "coral")+
labs(title = "Satisfacción área verde",
x = "Satisfacción área verde",
y = "Frecuencia")
view(dfSummary(proc_data, headings=FALSE, graph.col = FALSE))
cor(proc_data$sats_averde, proc_data$ingreso)
cor(proc_data$sats_conectividad, proc_data$ingreso)
cor(proc_data$sats_limpieza, proc_data$ingreso)
na.omit(proc_data)
# Crear un vector con los nombres de las comunas
nombres_comunas <- c("Providencia", "Colina", "Las Condes", "Puente Alto", "La Florida", "Santiago", "Maipu", "San Bernardo")
# Ordenar alfabéticamente los nombres de las comunas
nombres_comunas <- sort(nombres_comunas)
# Crear un vector con los valores numéricos en orden alfabético
valores_numericos <- 1:length(nombres_comunas)
# Crear una nueva columna en el dataframe para asignar los valores numéricos
proc_data$comunas_numericas <- NA
# Asignar valores numéricos a las comunas
for (i in 1:length(nombres_comunas)) {
proc_data$comunas_numericas[proc_data$comuna == nombres_comunas[i]] <- valores_numericos[i]
}
ggplot(proc_data, aes(x = comuna, y = sats_averde)) +
geom_bar() + # Agregar puntos al gráfico
labs(x = "Comuna", y = "Satisfacción con áreas verdes", title = "Relación entre satisfacción con áreas verdes y comunas")
ggplot(proc_data, aes(x = comuna, y = sats_averde, fill = comuna)) +
geom_bar(stat = "identity") +  # Utilizar stat = "identity" para usar los valores exactos de y
labs(x = "Comuna", y = "Satisfacción con áreas verdes", title = "Satisfacción con áreas verdes por comuna") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar las etiquetas del eje x para mejor legibilidad
#calcular el valor máximo en Ingreso
max_valor <- max(proc_data$ingreso)
#Imprimir el valor máximo
print(max_valor)
# Calcular el valor mínimo en la variable
min_valor <- min(proc_data$ingreso)
# Imprimir el valor mínimo
print(min_valor)
ggplot(proc_data, aes(x = comuna, y = ingreso)) +
geom_point() +  # Agregar puntos al gráfico
labs(x = "Comuna", y = "Ingresos", title = "Gráfico de Dispersión de Ingresos por Comuna") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotar las etiquetas del eje x para mejor legibilidad
ylim(0, 8000000)
# Crear el gráfico de barras con escala logarítmica en el eje y y etiquetas personalizadas
ggplot(proc_data, aes(x = comuna, y = ingreso, fill = comuna)) +
geom_bar(stat = "identity") +  # Utilizar stat = "identity" para usar los valores exactos de y
labs(x = "Comuna", y = "Ingresos", title = "Ingresos por Comuna") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotar las etiquetas del eje x para mejor legibilidad
scale_y_continuous(labels = scales::comma)  # Etiquetas personalizadas para los valores reales en el eje y
psych::alpha(dplyr::select(proc_data, ingreso, comuna, region))
psych::alpha(dplyr::select(proc_data))
